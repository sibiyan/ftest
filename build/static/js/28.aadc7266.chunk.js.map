{"version":3,"sources":["components/ld/address/main.jsx"],"names":["Wrapper","styled","div","_templateObject","StyledCard","_templateObject2","StyledButton","button","_templateObject3","Address","state","addressList","loading","error","editMode","handleFetchAddresses","_callee","_Users_swalihvpm_Desktop_django_react_ftest_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","_this","setState","authAxios","get","addressListURL","then","res","data","catch","err","stop","this","props","token","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","Fragment","map","address","key","id","PlaceName","areaName","full_address","vilalgeName","districtName","phone_number","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","to","concat","process","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","Component","connect","auth"],"mappings":"y+BASA,IAAMA,EAAUC,IAAOC,IAAVC,KAMPC,EAAaH,IAAOC,IAAVG,KAaVC,EAAeL,IAAOM,OAAVC,KAeZC,6MACJC,MAAQ,CACNC,YAAa,GACbC,SAAS,EACTC,MAAO,KACPC,UAAU,KAOZC,0CAAuB,SAAAC,IAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACrBC,EAAKC,SAAS,CAAEZ,SAAS,IACzBa,IACGC,IAAIC,KACJC,KAAK,SAAAC,GACJN,EAAKC,SAAS,CAAEb,YAAakB,EAAIC,KAAMlB,SAAS,MAEjDmB,MAAM,SAAAC,GACLT,EAAKC,SAAS,CAAEX,MAAOmB,EAAKpB,SAAS,MARpB,wBAAAQ,EAAAa,SAAAjB,EAAAkB,4FAHrBA,KAAKnB,wDAeE,IACCJ,EAAgBuB,KAAKxB,MAArBC,YAIR,OAHkBuB,KAAKC,MAAfC,MAONC,EAAAnB,EAAAoB,cAACtC,EAAD,KACGW,EACC0B,EAAAnB,EAAAoB,cAAAD,EAAAnB,EAAAqB,SAAA,KACG5B,EAAY6B,IAAI,SAAAC,GAAO,OACtBJ,EAAAnB,EAAAoB,cAAClC,EAAD,CAAYsC,IAAKD,EAAQE,IACvBN,EAAAnB,EAAAoB,cAAA,UAAKG,EAAQG,WACbP,EAAAnB,EAAAoB,cAAA,UAAKG,EAAQI,UACbR,EAAAnB,EAAAoB,cAAA,UAAKG,EAAQK,cACbT,EAAAnB,EAAAoB,cAAA,sBAAcG,EAAQM,aACtBV,EAAAnB,EAAAoB,cAAA,uBAAeG,EAAQO,cACvBX,EAAAnB,EAAAoB,cAAA,oBAAYG,EAAQQ,cACpBZ,EAAAnB,EAAAoB,cAACY,EAAA,EAAD,CACEC,GAAE,GAAAC,OAAKC,GAAL,iBAAAD,OAA2CX,EAAQE,KAErDN,EAAAnB,EAAAoB,cAAChC,EAAD,kBAMR+B,EAAAnB,EAAAoB,cAAClC,EAAD,KACEiC,EAAAnB,EAAAoB,cAACY,EAAA,EAAD,CAAMC,GAAE,mBACNd,EAAAnB,EAAAoB,cAAChC,EAAD,4BAzBD+B,EAAAnB,EAAAoB,cAACgB,EAAA,EAAD,CAAUH,GAAG,kBA9BJI,aAsEPC,4BANS,SAAA9C,GACtB,MAAO,CACL0B,MAAO1B,EAAM+C,KAAKrB,QAIPoB,CAAyB/C","file":"static/js/28.aadc7266.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n// import Breadcrumb from \"../common/breadcrumb\";\nimport { connect } from \"react-redux\";\n// import { Button } from \"react-bootstrap\";\nimport { addressListURL } from \"../../../constants\";\nimport { authAxios } from \"../../../authAxios\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  margin: 100px 30px auto auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 800px;\n  background-color: #fff;\n  color: #333;\n  border-radius: 10px;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);\n  padding: 20px;\n  margin: 10px;\n`;\n\nconst StyledButton = styled.button`\n  display: inline-block;\n  padding: 10px 30px;\n  cursor: pointer;\n  background: #ff4c3b;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  border: 1px #fff solid;\n  &:hover {\n    transform: scale(0.98);\n    color: #343a40;\n  }\n`;\n\nclass Address extends Component {\n  state = {\n    addressList: [],\n    loading: false,\n    error: null,\n    editMode: true\n  };\n\n  componentDidMount() {\n    this.handleFetchAddresses();\n  }\n\n  handleFetchAddresses = async () => {\n    this.setState({ loading: true });\n    authAxios\n      .get(addressListURL)\n      .then(res => {\n        this.setState({ addressList: res.data, loading: false });\n      })\n      .catch(err => {\n        this.setState({ error: err, loading: false });\n      });\n  };\n\n  render() {\n    const { addressList } = this.state;\n    const { token } = this.props;\n    // console.log(addressList);\n\n    if (!token) {\n      return <Redirect to=\"/login\" />;\n    }\n    return (\n      <Wrapper>\n        {addressList ? (\n          <>\n            {addressList.map(address => (\n              <StyledCard key={address.id}>\n                <h2>{address.PlaceName}</h2>\n                <h4>{address.areaName}</h4>\n                <h6>{address.full_address}</h6>\n                <h6>Village: {address.vilalgeName}</h6>\n                <h6>District: {address.districtName}</h6>\n                <h6>Phone: {address.phone_number}</h6>\n                <Link\n                  to={`${process.env.PUBLIC_URL}/editaddress/${address.id}`}\n                >\n                  <StyledButton>Edit</StyledButton>\n                </Link>\n              </StyledCard>\n            ))}\n          </>\n        ) : (\n          <StyledCard>\n            <Link to={`/create-address`}>\n              <StyledButton>Add your address</StyledButton>\n            </Link>\n          </StyledCard>\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(Address);\n"],"sourceRoot":""}