{"ast":null,"code":"var _jsxFileName = \"/Users/swalihvpm/Desktop/django-react/LD-gcloud/src/components/ld/manageOrders/testTable.jsx\";\nimport React from \"react\";\nimport { Table, Container } from \"react-bootstrap\";\nimport { useTable, useSortBy, useFilters } from \"react-table\";\nimport CustomInput from \"./CustomInput\";\n\nwindow.Date.prototype.isValid = function () {\n  // An invalid date object returns NaN for getTime() and NaN is the only\n  // object not strictly equal to itself.\n  // eslint-disable-next-line\n  return this.getTime() === this.getTime();\n};\n\nvar ColumnFilter = function ColumnFilter(_ref) {\n  var _ref$column = _ref.column,\n      filterValue = _ref$column.filterValue,\n      setFilter = _ref$column.setFilter,\n      filter = _ref$column.filter;\n  return React.createElement(CustomInput, {\n    value: filterValue || \"\",\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: \"Search \".concat(filter ? filter : \"\", \"...\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  });\n};\n/**\n * As in the previous versions, any react table needs colums where at the core we have a field Header, and accessor\n * As in the previous versions, a react table has data that consist of an array of JSONs\n */\n\n\nvar ReactTable = function ReactTable(_ref2) {\n  var columns = _ref2.columns,\n      data = _ref2.data;\n  // functions to run when a column is filtered depending on the type\n  var filterTypes = {\n    year: function year(rows, id, filterValue) {\n      return rows.filter(function (row) {\n        var rowValue = row.values[id];\n        return rowValue !== undefined && Number(filterValue) && new Date(rowValue) && new Date(rowValue).isValid() ? new Date(rowValue).getFullYear() === Number(filterValue) : true;\n      });\n    },\n    text: function text(rows, id, filterValue) {\n      return rows.filter(function (row) {\n        var rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  };\n  var defaultColumn = {\n    // Let's set up our default Filter UI\n    Filter: ColumnFilter\n  };\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    filterTypes: filterTypes\n  }, // hook for filters\n  useFilters, // hook for sorting\n  useSortBy),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      prepareRow = _useTable.prepareRow;\n\n  console.log(defaultColumn);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Table, Object.assign({\n    responsive: \"md\",\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\"\n  }, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, headerGroups.map(function (headerGroup) {\n    return React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), headerGroup.headers.map(function (column, i) {\n      // three new addition to column: isSorted, isSortedDesc, getSortByToggleProps\n      var render = column.render,\n          getHeaderProps = column.getHeaderProps,\n          isSorted = column.isSorted,\n          isSortedDesc = column.isSortedDesc,\n          getSortByToggleProps = column.getSortByToggleProps,\n          canFilter = column.canFilter;\n      var extraClass = isSorted ? isSortedDesc ? \"desc\" : \"asc\" : \"\";\n      return React.createElement(\"th\", {\n        key: \"th-\".concat(i),\n        className: extraClass // getHeaderProps now receives a function\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"div\", Object.assign({}, getHeaderProps(getSortByToggleProps()), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), render(\"Header\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, canFilter ? render(\"Filter\") : null));\n    }));\n  })), React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), rows.map(function (row, i) {\n    prepareRow(row);\n    return React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), row.cells.map(function (cell) {\n      return React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), cell.render(\"Cell\"));\n    }));\n  }))));\n};\n\nexport default ReactTable;","map":{"version":3,"sources":["/Users/swalihvpm/Desktop/django-react/LD-gcloud/src/components/ld/manageOrders/testTable.jsx"],"names":["React","Table","Container","useTable","useSortBy","useFilters","CustomInput","window","Date","prototype","isValid","getTime","ColumnFilter","column","filterValue","setFilter","filter","e","target","value","undefined","ReactTable","columns","data","filterTypes","year","rows","id","row","rowValue","values","Number","getFullYear","text","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","console","log","map","headerGroup","getHeaderGroupProps","headers","i","render","getHeaderProps","isSorted","isSortedDesc","getSortByToggleProps","canFilter","extraClass","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table, Container } from \"react-bootstrap\";\nimport { useTable, useSortBy, useFilters } from \"react-table\";\nimport CustomInput from \"./CustomInput\";\n\nwindow.Date.prototype.isValid = function() {\n  // An invalid date object returns NaN for getTime() and NaN is the only\n  // object not strictly equal to itself.\n  // eslint-disable-next-line\n  return this.getTime() === this.getTime();\n};\n\nconst ColumnFilter = ({ column: { filterValue, setFilter, filter } }) => {\n  return (\n    <CustomInput\n      value={filterValue || \"\"}\n      onChange={e => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${filter ? filter : \"\"}...`}\n    />\n  );\n};\n\n/**\n * As in the previous versions, any react table needs colums where at the core we have a field Header, and accessor\n * As in the previous versions, a react table has data that consist of an array of JSONs\n */\nconst ReactTable = ({ columns, data }) => {\n  // functions to run when a column is filtered depending on the type\n  const filterTypes = {\n    year: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined &&\n          Number(filterValue) &&\n          new Date(rowValue) &&\n          new Date(rowValue).isValid()\n          ? new Date(rowValue).getFullYear() === Number(filterValue)\n          : true;\n      });\n    },\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined\n          ? String(rowValue)\n              .toLowerCase()\n              .startsWith(String(filterValue).toLowerCase())\n          : true;\n      });\n    }\n  };\n  const defaultColumn = {\n    // Let's set up our default Filter UI\n    Filter: ColumnFilter\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes\n    },\n    // hook for filters\n    useFilters,\n    // hook for sorting\n    useSortBy\n  );\n  console.log(defaultColumn);\n  return (\n    <Container>\n      <Table\n        responsive=\"md\"\n        striped\n        bordered\n        hover\n        size=\"sm\"\n        {...getTableProps()}\n      >\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column, i) => {\n                // three new addition to column: isSorted, isSortedDesc, getSortByToggleProps\n                const {\n                  render,\n                  getHeaderProps,\n                  isSorted,\n                  isSortedDesc,\n                  getSortByToggleProps,\n                  // filter,\n                  canFilter\n                } = column;\n                const extraClass = isSorted\n                  ? isSortedDesc\n                    ? \"desc\"\n                    : \"asc\"\n                  : \"\";\n                return (\n                  <th\n                    key={`th-${i}`}\n                    className={extraClass}\n                    // getHeaderProps now receives a function\n                  >\n                    <div {...getHeaderProps(getSortByToggleProps())}>\n                      {render(\"Header\")}\n                    </div>\n                    {/* Render the columns filter UI */}\n                    <div>{canFilter ? render(\"Filter\") : null}</div>\n                  </th>\n                );\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Container>\n  );\n};\n\nexport default ReactTable;\n"]},"metadata":{},"sourceType":"module"}